rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own data
    match /users/{userId} {
      // Allow read/write access only to authenticated users accessing their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User preferences document
      match /preferences {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Years subcollection - users can manage their own years
      match /years/{yearId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Contacts subcollection - users can manage contacts within their years
        match /contacts/{contactId} {
          allow read, write: if request.auth != null && request.auth.uid == userId;
          
          // Validate contact data structure on write operations
          allow create, update: if request.auth != null 
            && request.auth.uid == userId
            && validateContactData(request.resource.data);
        }
      }
    }
    
    // Helper function to validate contact data
    function validateContactData(data) {
      return data.keys().hasAll(['firstName', 'lastName', 'enterpriseName', 'userId', 'yearId'])
        && data.firstName is string && data.firstName.size() > 0
        && data.lastName is string && data.lastName.size() > 0
        && data.enterpriseName is string && data.enterpriseName.size() > 0
        && data.userId is string
        && data.yearId is string
        && data.delivered is bool
        && (data.deliveredAt == null || data.deliveredAt is timestamp)
        && data.comments is string
        && data.createdAt is timestamp
        && data.updatedAt is timestamp;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}